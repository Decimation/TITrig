; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\GRAPHICSEXT.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME3"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME7"
.BEGREC "NONAME8",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.ENDREC "NONAME9"
.BEGREC "NONAME10",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME10"
.BEGREC "NONAME11",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME9"
.TYPE 104
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME15"
.BEGREC "NONAME16",26
.DEFINE "point"
.VALUE 0
.CLASS 8
.TAG "NONAME5"
.TYPE 8
.ENDEF
.DEFINE "label"
.VALUE 6
.CLASS 8
.DIM 20
.TYPE 98
.ENDEF
.ENDREC "NONAME16"
.BEGREC "NONAME17",72
.DEFINE "A"
.VALUE 0
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "B"
.VALUE 9
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "C"
.VALUE 18
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "a"
.VALUE 27
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "b"
.VALUE 36
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "c"
.VALUE 45
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "area"
.VALUE 54
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "perimeter"
.VALUE 63
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.ENDREC "NONAME17"
.BEGREC "NONAME18",8
.DEFINE "a"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "b"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "c"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "A"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "B"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "C"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "complete"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "isSSA"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME18"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
;    1	//
;    2	// Created by Decimation on 4/27/2018.
;    3	//
;    4	
;    5	#include "GraphicsExt.h"
;    6	#include "Library.h"
;    7	#include "Types.h"
;    8	#include <string.h>
;    9	#include <debug.h>
;   10	
;   11	void gfx_RadicalFraction(gfx_point_t point, int24_t numOuter, int24_t numInner, int24_t denomOuter, int24_t denomInner)
;   12	{
_gfx_RadicalFraction:
.DEFINE "_gfx_RadicalFraction"

.VALUE _gfx_RadicalFraction

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_RadicalFraction",12,"_gfx_RadicalFraction"

.LINE 12

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "numOuter"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "numInner"

.CLASS 65

.VALUE 15

.TYPE 4

.ENDEF

.DEFINE "denomOuter"

.CLASS 65

.VALUE 18

.TYPE 4

.ENDEF

.DEFINE "denomInner"

.CLASS 65

.VALUE 21

.TYPE 4

.ENDEF

.DEFINE "numLength"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "denomLength"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "numInnerBuf"

.CLASS 65

.VALUE -16

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "numOuterBuf"

.CLASS 65

.VALUE -26

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "denomInnerBuf"

.CLASS 65

.VALUE -36

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "denomOuterBuf"

.CLASS 65

.VALUE -46

.DIM 10

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-53
	LD	SP,HL
;   13		char numInnerBuf[10], numOuterBuf[10];
;   14		char denomInnerBuf[10], denomOuterBuf[10];
;   15	
;   16		int numLength, denomLength;
;   17	
;   18		sprintf(numOuterBuf, "%d", numOuter);
.LINE 18

	LD	DE,(IX+12)
	PUSH	DE
	LD	DE,L__0
	PUSH	DE
	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   19		sprintf(numInnerBuf, "%d", numInner);
.LINE 19

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,L__1
	PUSH	DE
	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   20	
;   21		sprintf(denomOuterBuf, "%d", denomOuter);
.LINE 21

	LD	DE,(IX+18)
	PUSH	DE
	LD	DE,L__2
	PUSH	DE
	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   22		sprintf(denomInnerBuf, "%d", denomInner);
.LINE 22

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,L__3
	PUSH	DE
	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   23	
;   24		numLength   = (strlen(numOuterBuf) + strlen(numInnerBuf));
.LINE 24

	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-16
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-3),HL
;   25		denomLength = (strlen(denomOuterBuf) + strlen(denomInnerBuf));
.LINE 25

	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-36
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-6),HL
;   26	
;   27		//todo: center the fractions in these two cases
;   28		if (numLength > denomLength)
.LINE 28

	LD	DE,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_3
;   29		{
;   30			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
.LINE 30

	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-26
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   31	
;   32			point.y -= 9;
.LINE 32

	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   33			gfx_Sqrt(point, numOuter, numInner);
.LINE 33

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   34	
;   35			point.y += 14;
.LINE 35

	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   36			gfx_Sqrt(point, denomOuter, denomInner);
.LINE 36

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   37		}
;   38		else if (numLength < denomLength)
.LINE 38

	JR	L_4
L_3:
	LD	DE,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_1
;   39		{
;   40			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(denomInnerBuf) + gfx_GetStringWidth(denomOuterBuf) + 7);
.LINE 40

	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-46
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   41	
;   42			point.y -= 9;
.LINE 42

	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   43			gfx_Sqrt(point, numOuter, numInner);
.LINE 43

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   44	
;   45			point.y += 14;
.LINE 45

	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   46			gfx_Sqrt(point, denomOuter, denomInner);
.LINE 46

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   47		}
;   48		else
.LINE 48

	JR	L_4
L_1:
;   49		{
;   50			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
.LINE 50

	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-26
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   51	
;   52			point.y -= 9;
.LINE 52

	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   53			gfx_Sqrt(point, numOuter, numInner);
.LINE 53

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   54	
;   55			point.y += 14;
.LINE 55

	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   56			gfx_Sqrt(point, denomOuter, denomInner);
.LINE 56

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   57	
;   58		}
;   59	}
L_4:
.LINE 59

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_RadicalFraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Sqrt                           IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;denomOuterBuf                        IX-46     10   variable
;denomInnerBuf                        IX-36     10   variable
;numOuterBuf                          IX-26     10   variable
;numInnerBuf                          IX-16     10   variable
;denomLength                           IX-6      3   variable
;numLength                             IX-3      3   variable
;denomInner                           IX+21      3   parameter
;denomOuter                           IX+18      3   parameter
;numInner                             IX+15      3   parameter
;numOuter                             IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 77 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_RadicalFraction",59,"_gfx_RadicalFraction"
	SEGMENT STRSECT
L__0:
	DB	"%d"
	DB	0
L__1:
	DB	"%d"
	DB	0
L__2:
	DB	"%d"
	DB	0
L__3:
	DB	"%d"
	DB	0
	SEGMENT CODE
;   60	
;   61	void gfx_Fraction(gfx_point_t point, real_t num, real_t denom)
;   62	{
_gfx_Fraction:
.DEFINE "_gfx_Fraction"

.VALUE _gfx_Fraction

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Fraction",62,"_gfx_Fraction"

.LINE 62

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "num"

.CLASS 65

.VALUE 12

.TAG "NONAME8"

.TYPE 8

.ENDEF

.DEFINE "denom"

.CLASS 65

.VALUE 21

.TAG "NONAME8"

.TYPE 8

.ENDEF

.DEFINE "numbuf"

.CLASS 65

.VALUE -10

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "denombuf"

.CLASS 65

.VALUE -20

.DIM 10

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-23
	LD	SP,HL
;   63		char numbuf[10];
;   64		char denombuf[10];
;   65		os_RealToStr(numbuf, &num, 0, 0, 6);
.LINE 65

	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	PUSH	DE
	PEA	IX+12
	PEA	IX+-10
	LD	(IX+-23),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-23)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   66		os_RealToStr(denombuf, &denom, 0, 0, 6);
.LINE 66

	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	PUSH	DE
	PEA	IX+21
	PEA	IX+-20
	LD	(IX+-23),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-23)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   67		gfx_FractionStr(point, numbuf, denombuf);
.LINE 67

	PEA	IX+-20
	PEA	IX+-10
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_FractionStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   68	}
.LINE 68

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Fraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FractionStr                    IMPORT  -----   function
;_os_RealToStr                       IMPORT  -----   function
;denombuf                             IX-20     10   variable
;numbuf                               IX-10     10   variable
;denom                                IX+21      9   parameter
;num                                  IX+12      9   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Fraction",68,"_gfx_Fraction"
;   69	
;   70	void gfx_FractionStr(gfx_point_t point, const char* num, const char* denom)
;   71	{
_gfx_FractionStr:
.DEFINE "_gfx_FractionStr"

.VALUE _gfx_FractionStr

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_FractionStr",71,"_gfx_FractionStr"

.LINE 71

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "num"

.CLASS 65

.VALUE 12

.TYPE 194

.ENDEF

.DEFINE "denom"

.CLASS 65

.VALUE 15

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   72	
;   73	
;   74		if (strlen(num) > strlen(denom))
.LINE 74

	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	LD	DE,(IX+15)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_strlen
	LD	BC,(IX+-3)
	POP	DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_9
;   75		{
;   76			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(num) + 1);
.LINE 76

	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   77	
;   78			gfx_PrintStringXY(denom, point.x + ((gfx_GetStringWidth(denom) + 1) / 2), point.y + 5);
.LINE 78

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   79			gfx_PrintStringXY(num, point.x, point.y - 5);
.LINE 79

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   80		}
;   81		else if (strlen(num) < strlen(denom))
.LINE 81

	JR	L_10
L_9:
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	DE,HL
	LD	BC,(IX+15)
	PUSH	BC
	LD	(IX+-3),DE
	LD	(IX+-4),D
	CALL	_strlen
	LD	DE,(IX+-3)
	LD	D,(IX+-4)
	POP	BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_7
;   82		{
;   83			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
.LINE 83

	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   84	
;   85			gfx_PrintStringXY(num, point.x + ((gfx_GetStringWidth(num) + 1) / 2), point.y - 5);
.LINE 85

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   86			gfx_PrintStringXY(denom, point.x, point.y + 5);
.LINE 86

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   87		}
;   88		else
.LINE 88

	JR	L_10
L_7:
;   89		{
;   90			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
.LINE 90

	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   91	
;   92			gfx_PrintStringXY(num, point.x, point.y - 5);
.LINE 92

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   93			gfx_PrintStringXY(denom, point.x, point.y + 5);
.LINE 93

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   94		}
;   95	}
L_10:
.LINE 95

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_FractionStr ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;denom                                IX+15      3   parameter
;num                                  IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_FractionStr",95,"_gfx_FractionStr"
;   96	
;   97	void gfx_Sqrt(gfx_point_t point, int24_t outer, int24_t inner)
;   98	{
_gfx_Sqrt:
.DEFINE "_gfx_Sqrt"

.VALUE _gfx_Sqrt

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Sqrt",98,"_gfx_Sqrt"

.LINE 98

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "outer"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "inner"

.CLASS 65

.VALUE 15

.TYPE 4

.ENDEF

.DEFINE "strW"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "buf"

.CLASS 65

.VALUE -23

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-23
	LD	SP,HL
;   99		char buf[20];
;  100		int  strW;
;  101		dbg_sprintf(dbgout, "[GFX] Drawing sqrt\n");
.LINE 101

	LD	BC,L__11
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  102		sprintf(buf, "%d", outer);
.LINE 102

	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  103		strW = gfx_GetStringWidth(buf);
.LINE 103

	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-3),HL
;  104	
;  105		//190, 155
;  106		gfx_PrintStringXY(buf, point.x, point.y);
.LINE 106

	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  107	
;  108		//198, 158 -> 200, 160
;  109		gfx_Line(point.x + strW, point.y + 3, point.x + strW + 2, point.y + 7);
.LINE 109

	LD	IY,(IX+9)
	LEA	BC,IY+7
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	INC	HL
	INC	HL
	PUSH	HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  110	
;  111		//205, 155
;  112		gfx_VertLine(point.x + strW + 3, point.y - 3, 11);
.LINE 112

	LD	BC,11
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  113	
;  114		sprintf(buf, "%d", inner);
.LINE 114

	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  115		gfx_PrintStringXY(buf, point.x + strW + 6, point.y);
.LINE 115

	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  116	
;  117		gfx_HorizLine(point.x + strW + 3, point.y - 3, gfx_GetStringWidth(buf) + 3);
.LINE 117

	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  118	}
.LINE 118

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Sqrt ***************************
;Name                         Addr/Register   Size   Type
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;buf                                  IX-23     20   variable
;strW                                  IX-3      3   variable
;inner                                IX+15      3   parameter
;outer                                IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 41 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Sqrt",118,"_gfx_Sqrt"
	SEGMENT STRSECT
L__11:
	DB	"[GFX] Drawing sqrt"
	DB	10,0
L__12:
	DB	"%d"
	DB	0
L__13:
	DB	"%d"
	DB	0
	SEGMENT CODE
;  119	
;  120	void gfx_Clear(const superpoint_t* p)
;  121	{
_gfx_Clear:
.DEFINE "_gfx_Clear"

.VALUE _gfx_Clear

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Clear",121,"_gfx_Clear"

.LINE 121

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

.DEFINE "w"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;  122		const int w = gfx_GetStringWidth(p->label);
.LINE 122

	LD	IY,(IX+6)
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-3),HL
;  123		gfx_SetColor(gfx_white);
.LINE 123

	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  124		gfx_FillRectangle(p->point.x, p->point.y, w, 9);
.LINE 124

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-6),BC
	LD	BC,9
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	IY,(IX+-6)
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  125		gfx_SetColor(gfx_blue);
.LINE 125

	LD	BC,16
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  126	}
.LINE 126

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Clear ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;w                                     IX-3      3   variable
;p                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Clear",126,"_gfx_Clear"
;  127	
;  128	void gfx_Print(const superpoint_t* p)
;  129	{
_gfx_Print:
.DEFINE "_gfx_Print"

.VALUE _gfx_Print

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Print",129,"_gfx_Print"

.LINE 129

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  130		gfx_PrintStringXY(p->label, p->point.x, p->point.y);
.LINE 130

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,(IY+0)
	PUSH	BC
	LD	IY,(IX+6)
	PEA	IY+6
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  131	}
.LINE 131

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Print ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;p                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Print",131,"_gfx_Print"
;  132	
;  133	void sp_SetLabel(const superpoint_t* p, const char* s)
;  134	{
_sp_SetLabel:
.DEFINE "_sp_SetLabel"

.VALUE _sp_SetLabel

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "sp_SetLabel",134,"_sp_SetLabel"

.LINE 134

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

.DEFINE "s"

.CLASS 65

.VALUE 9

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  135		gfx_Clear(p);
.LINE 135

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  136		lib_MemZero(p->label, 20);
.LINE 136

	LD	BC,20
	PUSH	BC
	LD	IY,(IX+6)
	PEA	IY+6
	CALL	_lib_MemZero
	POP	BC
	POP	BC
;  137		strncpy(p->label, s, strlen(s));
.LINE 137

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	PUSH	HL
	LD	BC,(IX+9)
	PUSH	BC
	LD	IY,(IX+6)
	PEA	IY+6
	CALL	_strncpy
	POP	BC
	POP	BC
	POP	BC
;  138	}
.LINE 138

	LD	SP,IX
	POP	IX
	RET	


;**************************** _sp_SetLabel ***************************
;Name                         Addr/Register   Size   Type
;_strlen                             IMPORT  -----   function
;_strncpy                            IMPORT  -----   function
;_lib_MemZero                        IMPORT  -----   function
;_gfx_Clear                          IMPORT  -----   function
;s                                     IX+9      3   parameter
;p                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "sp_SetLabel",138,"_sp_SetLabel"
;  139	
;  140	
;  141	real_t io_gfx_ReadSqrt(superpoint_t* point) {
_io_gfx_ReadSqrt:
.DEFINE "_io_gfx_ReadSqrt"

.VALUE _io_gfx_ReadSqrt

.CLASS 2

.TAG "NONAME8"

.TYPE 72

.ENDEF

.BEGFUNC "io_gfx_ReadSqrt",141,"_io_gfx_ReadSqrt"

.LINE 141

.DEFINE "point"

.CLASS 65

.VALUE 9

.TAG "NONAME16"

.TYPE 40

.ENDEF

.DEFINE "strW"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "key"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

.DEFINE "tmp"

.CLASS 65

.VALUE -22

.TAG "NONAME8"

.TYPE 8

.ENDEF

.DEFINE "initialValue"

.CLASS 65

.VALUE -31

.TAG "NONAME8"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-100
	LD	SP,HL
;  142		real_t tmp, initialValue;
;  143		uint8_t key;
;  144		int i = 0;
.LINE 144

	LD	BC,0
	LD	(IX+-6),BC
;  145		const int strW = gfx_GetStringWidth(point->label);
.LINE 145

	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-3),HL
;  146		static char chars[] = "\0\0\0\0\0\0\0\0\0\0\"-RMH\0\0?[69LG\0\0.258KFC\0 147JEB\0\0XSNIDA\0\0\0\0\0\0\0\0";
.LINE 146

.DEFINE "chars"

.ALIAS "_0chars"

.CLASS 69

.VALUE _0chars

.DIM 57

.TYPE 98

.ENDEF

;  147		chars[33] = '0';
.LINE 147

	LD	HL,_0chars+33
	LD	(HL),48
;  148		chars[18] = '3';
.LINE 148

	LD	HL,_0chars+18
	LD	(HL),51
;  149	
;  150		if (strlen(point->label) != 0) {
.LINE 150

	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_strlen
	POP	BC
	CALL	__icmpzero
	JR	Z,L_16
;  151			initialValue = os_StrToReal(point->label, NULL);
.LINE 151

	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-40
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-31
	LD	BC,9
	LDIR	
;  152		}
;  153		else {
.LINE 153

	JR	L_17
L_16:
;  154			initialValue = os_Int24ToReal(1);
.LINE 154

	LD	BC,1
	PUSH	BC
	PEA	IX+-49
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-31
	LD	BC,9
	LDIR	
;  155		}
L_17:
.LINE 155

;  156	
;  157		gfx_Clear(point);
.LINE 157

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  158		gfx_Print(point);
.LINE 158

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Print
	POP	BC
;  159	
;  160		gfx_Line(point->point.x + strW, point->point.y + 3, point->point.x + strW + 2, point->point.y + 7);
.LINE 160

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-52),BC
	LD	IY,(IX+-52)
	LD	BC,(IY+0)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	IY,(IY+3)
	LEA	BC,IY+7
	PUSH	BC
	LD	BC,HL
	INC	BC
	INC	BC
	PUSH	BC
	LD	IY,(IX+-52)
	LD	IY,(IY+3)
	LEA	BC,IY+3
	PUSH	BC
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  161	
;  162		gfx_VertLine(point->point.x +strW + 3, point->point.y - 3, 11);
.LINE 162

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-55),BC
	LD	BC,11
	PUSH	BC
	LD	IY,(IX+-55)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-55)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  163	
;  164		gfx_HorizLine(point->point.x +strW + 3, point->point.y - 3, strW + 3);
.LINE 164

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-58),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-58)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-58)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  165	
;  166		//gfx_Clear(point);
;  167		lib_MemZero(point->label, 20);
.LINE 167

	LD	BC,20
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_lib_MemZero
	POP	BC
	POP	BC
;  168	
;  169		while ((key = os_GetCSC()) != sk_Enter)
.LINE 169

	JR	L_24
L_25:
;  170		{
;  171			if (key == sk_Del)
.LINE 171

	LD	A,(IX+-7)
	CP	A,56
	JR	NZ,L_22
;  172			{
;  173				gfx_Clear(point);
.LINE 173

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  174				point->label[--i] = '\0';
.LINE 174

	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	(HL),0
;  175				gfx_Clear(point);
.LINE 175

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  176				gfx_Print(point);
.LINE 176

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Print
	POP	BC
;  177			}
;  178	
;  179			else if (chars[key] && i + 1 <= gDigitThreshold)
.LINE 179

	JR	L_23
L_22:
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	LD	BC,_0chars
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_23
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-10),BC
	LD	A,(_gDigitThreshold)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JP	M,L_23
;  180			{
;  181				point->label[i++] = chars[key];
.LINE 181

	LD	HL,(IX+-13)
	LD	(IX+-100),HL	; spill
	LD	BC,(IX+-6)
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	(IX+-97),HL	; spill
	LD	HL,(IX+-100)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-97)	; unspill
	LD	(HL),A
	LD	BC,(IX+-10)
	LD	(IX+-6),BC
;  182				gfx_PrintStringXY(point->label, point->point.x + strW + 6, point->point.y);
.LINE 182

	LEA	BC,IY+0
	LD	(IX+-61),BC
	LD	IY,(IX+-61)
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  183			}
L_23:
.LINE 183

;  184			gfx_HorizLine(point->point.x + strW+ 3, point->point.y - 3, gfx_GetStringWidth(point->label)+3);
.LINE 184

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-64),BC
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-64)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-64)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  185		}
L_24:
.LINE 185

	CALL	_os_GetCSC
	LD	(IX+-7),A
	CP	A,9
	JR	NZ,L_25
;  186	
;  187		gfx_SetColor(gfx_white);
.LINE 187

	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  188		gfx_FillRectangle(point->point.x, point->point.y - 3, gfx_GetStringWidth(point->label) + strW + 6, point->point.y + 3);
.LINE 188

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-67),BC
	LD	IY,(IY+3)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	LD	IY,(IX+-67)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	IY,(IX+-67)
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  189		gfx_SetColor(gfx_black);
.LINE 189

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  190	
;  191		tmp = os_StrToReal(point->label, NULL);
.LINE 191

	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-76
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-22
	LD	BC,9
	LDIR	
;  192		tmp = os_RealSqrt(&tmp);
.LINE 192

	PEA	IX+-22
	PEA	IX+-85
	CALL	_os_RealSqrt
	POP	BC
	POP	BC
	LEA	DE,IX+-22
	LD	BC,9
	LDIR	
;  193		return os_RealMul(&initialValue, &tmp);
.LINE 193

	PEA	IX+-22
	PEA	IX+-31
	PEA	IX+-94
	CALL	_os_RealMul
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+6
	LD	DE,(IY)
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)
;  194	}
.LINE 194

	LD	SP,IX
	POP	IX
	RET	


;**************************** _io_gfx_ReadSqrt ***************************
;Name                         Addr/Register   Size   Type
;_os_RealMul                         IMPORT  -----   function
;_os_RealSqrt                        IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gDigitThreshold                    IMPORT      1   variable
;_lib_MemZero                        IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_gfx_Print                          IMPORT  -----   function
;_gfx_Clear                          IMPORT  -----   function
;_os_Int24ToReal                     IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_0chars                             STATIC     57   variable
;_gfx_GetStringWidth                 IMPORT  -----   function
;initialValue                         IX-31      9   variable
;tmp                                  IX-22      9   variable
;G_3                                  IX-13      3   variable
;G_4                                  IX-10      3   variable
;key                                   IX-7      1   variable
;i                                     IX-6      3   variable
;strW                                  IX-3      3   variable
;point                                 IX+9      3   parameter


; Stack Frame Size: 112 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "io_gfx_ReadSqrt",194,"_io_gfx_ReadSqrt"
	SEGMENT DATA
_0chars:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	34
	DB	45
	DB	82
	DB	77
	DB	72
	DB	0
	DB	0
	DB	63
	DB	91
	DB	54
	DB	57
	DB	76
	DB	71
	DB	0
	DB	0
	DB	46
	DB	50
	DB	53
	DB	56
	DB	75
	DB	70
	DB	67
	DB	0
	DB	32
	DB	49
	DB	52
	DB	55
	DB	74
	DB	69
	DB	66
	DB	0
	DB	0
	DB	88
	DB	83
	DB	78
	DB	73
	DB	68
	DB	65
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;  195	
;  196	real_t io_gfx_ReadReal(superpoint_t* point)
;  197	{
_io_gfx_ReadReal:
.DEFINE "_io_gfx_ReadReal"

.VALUE _io_gfx_ReadReal

.CLASS 2

.TAG "NONAME8"

.TYPE 72

.ENDEF

.BEGFUNC "io_gfx_ReadReal",197,"_io_gfx_ReadReal"

.LINE 197

.DEFINE "point"

.CLASS 65

.VALUE 9

.TAG "NONAME16"

.TYPE 40

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "key"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "isNeg"

.CLASS 65

.VALUE -6

.TYPE 12

.ENDEF

.DEFINE "rbuffer"

.CLASS 65

.VALUE -15

.TAG "NONAME8"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-51
	LD	SP,HL
;  198		bool        isNeg   = false;
.LINE 198

	LD	(IX+-6),0
;  199		uint8_t     key, i  = 0;
.LINE 199

	LD	(IX+-1),0
;  200		real_t      rbuffer;
;  201		static char chars[] = "\0\0\0\0\0\0\0\0\0\0\"-RMH\0\0?[69LG\0\0.258KFC\0 147JEB\0\0XSNIDA\0\0\0\0\0\0\0\0";
.LINE 201

.DEFINE "chars"

.ALIAS "_1chars"

.CLASS 69

.VALUE _1chars

.DIM 57

.TYPE 98

.ENDEF

;  202		gfx_Clear(point);
.LINE 202

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  203		lib_MemZero(point->label, 20);
.LINE 203

	LD	BC,20
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_lib_MemZero
	POP	BC
	POP	BC
;  204		chars[33] = '0';
.LINE 204

	LD	IY,_1chars
	LEA	HL,IY+33
	LD	(HL),48
;  205		chars[18] = '3';
.LINE 205

	LEA	HL,IY+18
	LD	(HL),51
;  206	
;  207		while ((key = os_GetCSC()) != sk_Enter)
.LINE 207

	JR	L_39
L_40:
;  208		{
;  209	
;  210			if (key == sk_Del)
.LINE 210

	LD	A,(IX+-2)
	CP	A,56
	JR	NZ,L_31
;  211			{
;  212				gfx_Clear(point);
.LINE 212

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  213				point->label[--i] = '\0';
.LINE 213

	DEC	(IX+-1)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	(HL),0
;  214				gfx_Clear(point);
.LINE 214

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  215				gfx_Print(point);
.LINE 215

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Print
	POP	BC
;  216			}
L_31:
.LINE 216

;  217	
;  218			if (key == 0x11) // todo: remove negative number support in GFX as our triangles can't have signed values
.LINE 218

	LD	A,(IX+-2)
	CP	A,17
	JR	NZ,L_37
;  219			{
;  220				dbg_sprintf(dbgout, "Negative sign detected\n");
.LINE 220

	LD	BC,L__26
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  221				point->label[i++] = char_Neg;
.LINE 221

	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	A,(_char_Neg)
	LD	(HL),A
	INC	(IX+-1)
;  222				gfx_Clear(point);
.LINE 222

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  223				gfx_Print(point);
.LINE 223

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Print
	POP	BC
;  224				isNeg = true;
.LINE 224

	LD	(IX+-6),1
;  225			}
L_37:
.LINE 225

;  226	
;  227			if (chars[key] == 'I') {
.LINE 227

	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_1chars
	ADD	HL,BC
	LD	(IX+-5),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,73
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_36
;  228	
;  229				rbuffer = io_gfx_ReadSqrt(point);
.LINE 229

	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-24
	CALL	_io_gfx_ReadSqrt
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
;  230				return rbuffer;
.LINE 230

	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)
	JR	L_44
;  231			}
;  232	
;  233			else if (chars[key] && i + 1 <= gDigitThreshold)
L_36:
.LINE 233

	LD	HL,(IX+-5)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_38
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_gDigitThreshold)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	JP	M,L_38
;  234			{
;  235				point->label[i++] = chars[key];
.LINE 235

	LD	IY,(IX+-5)
	LD	(IX+-51),IY	; spill
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	IY,(IX+-51)	; unspill
	LD	A,(IY)
	LD	(HL),A
	INC	(IX+-1)
;  236			}
L_38:
.LINE 236

;  237			gfx_Print(point);
.LINE 237

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_Print
	POP	BC
;  238			gfx_HorizLine(point->point.x, point->point.y + 8, gfx_GetStringWidth(point->label));
.LINE 238

	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-27),BC
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	IY,(IX+-27)
	LD	IY,(IY+3)
	LEA	BC,IY+8
	PUSH	BC
	LD	IY,(IX+-27)
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  239		}
L_39:
.LINE 239

	CALL	_os_GetCSC
	LD	(IX+-2),A
	CP	A,9
	JR	NZ,L_40
;  240	
;  241		rbuffer = os_StrToReal(point->label, NULL);
.LINE 241

	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-36
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
;  242		if (isNeg) rbuffer = os_RealNeg(&rbuffer);
.LINE 242

	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_43
	PEA	IX+-15
	PEA	IX+-45
	CALL	_os_RealNeg
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
L_43:
;  243	
;  244		/**/
;  245		//lib_StrReplace(point->label, char_Neg, '-');
;  246		//dbg_sprintf(dbgout, "[IO In] %s\n", point->label);
;  247	
;  248		return rbuffer;
.LINE 248

	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)
;  249	}
L_44:
.LINE 249

	LD	SP,IX
	POP	IX
	RET	


;**************************** _io_gfx_ReadReal ***************************
;Name                         Addr/Register   Size   Type
;_os_RealNeg                         IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_gDigitThreshold                    IMPORT      1   variable
;_char_Neg                           IMPORT      1   variable
;_sprintf                            IMPORT  -----   function
;_gfx_Print                          IMPORT  -----   function
;_1chars                             STATIC     57   variable
;_lib_MemZero                        IMPORT  -----   function
;_gfx_Clear                          IMPORT  -----   function
;rbuffer                              IX-15      9   variable
;isNeg                                 IX-6      1   variable
;G_5                                   IX-5      3   variable
;key                                   IX-2      1   variable
;i                                     IX-1      1   variable
;point                                 IX+9      3   parameter


; Stack Frame Size: 63 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "io_gfx_ReadReal",249,"_io_gfx_ReadReal"
	SEGMENT STRSECT
L__26:
	DB	"Negative sign detected"
	DB	10,0
	SEGMENT DATA
_1chars:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	34
	DB	45
	DB	82
	DB	77
	DB	72
	DB	0
	DB	0
	DB	63
	DB	91
	DB	54
	DB	57
	DB	76
	DB	71
	DB	0
	DB	0
	DB	46
	DB	50
	DB	53
	DB	56
	DB	75
	DB	70
	DB	67
	DB	0
	DB	32
	DB	49
	DB	52
	DB	55
	DB	74
	DB	69
	DB	66
	DB	0
	DB	0
	DB	88
	DB	83
	DB	78
	DB	73
	DB	68
	DB	65
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;  250	
;  251	bool PointEq(const superpoint_t a, const superpoint_t b)
;  252	{
_PointEq:
.DEFINE "_PointEq"

.VALUE _PointEq

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "PointEq",252,"_PointEq"

.LINE 252

.DEFINE "a"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 8

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 33

.TAG "NONAME16"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  253		return a.point.x == b.point.x && a.point.y == b.point.y;
.LINE 253

	LD	BC,(IX+33)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_47
	LD	BC,(IX+36)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_47
;  254	}
.LINE 254

	LD	BC,1
	LD	(IX+-3),BC
	JR	L_48
L_47:
	LD	BC,0
	LD	(IX+-3),BC
L_48:
	LD	A,(IX+-3)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PointEq ***************************
;Name                         Addr/Register   Size   Type
;temp49                                IX-3      3   variable
;b                                    IX+33     26   parameter
;a                                     IX+6     26   parameter


; Stack Frame Size: 63 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "PointEq",254,"_PointEq"
;  255	
;  256	void gfx_SetFocus(superpoint_t** currSel, superpoint_t* from, superpoint_t* to)
;  257	{
_gfx_SetFocus:
.DEFINE "_gfx_SetFocus"

.VALUE _gfx_SetFocus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_SetFocus",257,"_gfx_SetFocus"

.LINE 257

.DEFINE "currSel"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 296

.ENDEF

.DEFINE "from"

.CLASS 65

.VALUE 9

.TAG "NONAME16"

.TYPE 40

.ENDEF

.DEFINE "to"

.CLASS 65

.VALUE 12

.TAG "NONAME16"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  258		gfx_ClearHighlight(from);
.LINE 258

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_gfx_ClearHighlight
	POP	BC
;  259		gfx_HighlightPoint(to);
.LINE 259

	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_HighlightPoint
	POP	BC
;  260		*currSel = to;
.LINE 260

	LD	HL,(IX+6)
	LD	BC,(IX+12)
	LD	(HL),BC
;  261		dbg_sprintf(dbgout, "[GFX] %s -> %s\n", from->label, to->label);
.LINE 261

	LD	IY,(IX+12)
	PEA	IY+6
	LD	IY,(IX+9)
	PEA	IY+6
	LD	BC,L__36
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  262	}
.LINE 262

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_SetFocus ***************************
;Name                         Addr/Register   Size   Type
;_sprintf                            IMPORT  -----   function
;_gfx_HighlightPoint                 IMPORT  -----   function
;_gfx_ClearHighlight                 IMPORT  -----   function
;to                                   IX+12      3   parameter
;from                                  IX+9      3   parameter
;currSel                               IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_SetFocus",262,"_gfx_SetFocus"
	SEGMENT STRSECT
L__36:
	DB	"[GFX] %s -> %s"
	DB	10,0
	SEGMENT CODE
;  263	
;  264	void gfx_ClearHighlight(const superpoint_t* p)
;  265	{
_gfx_ClearHighlight:
.DEFINE "_gfx_ClearHighlight"

.VALUE _gfx_ClearHighlight

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_ClearHighlight",265,"_gfx_ClearHighlight"

.LINE 265

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  266		gfx_Clear(p);
.LINE 266

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_Clear
	POP	BC
;  267		gfx_PrintColor(p, gfx_black);
.LINE 267

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintColor
	POP	BC
	POP	BC
;  268	}
.LINE 268

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_ClearHighlight ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintColor                     IMPORT  -----   function
;_gfx_Clear                          IMPORT  -----   function
;p                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_ClearHighlight",268,"_gfx_ClearHighlight"
;  269	
;  270	void gfx_PrintColor(const superpoint_t* p, uint8_t color)
;  271	{
_gfx_PrintColor:
.DEFINE "_gfx_PrintColor"

.VALUE _gfx_PrintColor

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_PrintColor",271,"_gfx_PrintColor"

.LINE 271

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

.DEFINE "color"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  272		gfx_SetTextFGColor(color);
.LINE 272

	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  273		gfx_PrintStringXY(p->label, p->point.x, p->point.y);
.LINE 273

	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-3),BC
	LD	IY,(IX+-3)
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,(IY+0)
	PUSH	BC
	LD	IY,(IX+6)
	PEA	IY+6
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  274		gfx_SetTextFGColor(gfx_black);
.LINE 274

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  275	}
.LINE 275

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_PrintColor ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;color                                 IX+9      1   parameter
;p                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_PrintColor",275,"_gfx_PrintColor"
;  276	
;  277	void gfx_HighlightPoint(const superpoint_t* p)
;  278	{
_gfx_HighlightPoint:
.DEFINE "_gfx_HighlightPoint"

.VALUE _gfx_HighlightPoint

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_HighlightPoint",278,"_gfx_HighlightPoint"

.LINE 278

.DEFINE "p"

.CLASS 65

.VALUE 6

.TAG "NONAME16"

.TYPE 200

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  279		gfx_PrintColor(p, gfx_red);
.LINE 279

	LD	BC,224
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintColor
	POP	BC
	POP	BC
.LINE 280

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_HighlightPoint ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintColor                     IMPORT  -----   function
;p                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_HighlightPoint",280,"_gfx_HighlightPoint"
	XREF _sprintf:ROM
	XREF _strlen:ROM
	XREF _strncpy:ROM
	XREF _char_Neg:ROM
	XREF _lib_MemZero:ROM
	XREF _gDigitThreshold:ROM
	XREF _os_GetCSC:ROM
	XREF _os_StrToReal:ROM
	XREF _os_RealToStr:ROM
	XREF _os_Int24ToReal:ROM
	XREF _os_RealMul:ROM
	XREF _os_RealSqrt:ROM
	XREF _os_RealNeg:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_SetColor:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _gfx_HighlightPoint
	XDEF _gfx_PrintColor
	XDEF _gfx_ClearHighlight
	XDEF _gfx_SetFocus
	XDEF _PointEq
	XDEF _io_gfx_ReadReal
	XDEF _io_gfx_ReadSqrt
	XDEF _sp_SetLabel
	XDEF _gfx_Print
	XDEF _gfx_Clear
	XDEF _gfx_Sqrt
	XDEF _gfx_FractionStr
	XDEF _gfx_Fraction
	XDEF _gfx_RadicalFraction
	END
