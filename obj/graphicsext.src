; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\GRAPHICSEXT.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME3"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME7"
.BEGREC "NONAME8",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.ENDREC "NONAME9"
.BEGREC "NONAME10",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME10"
.BEGREC "NONAME11",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME9"
.TYPE 104
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME8"
.TYPE 104
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME15"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME16",72
.DEFINE "A"
.VALUE 0
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "B"
.VALUE 9
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "C"
.VALUE 18
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "a"
.VALUE 27
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "b"
.VALUE 36
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "c"
.VALUE 45
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "area"
.VALUE 54
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.DEFINE "perimeter"
.VALUE 63
.CLASS 8
.TAG "NONAME8"
.TYPE 8
.ENDEF
.ENDREC "NONAME16"
.BEGREC "NONAME17",8
.DEFINE "a"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "b"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "c"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "A"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "B"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "C"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "complete"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "isSSA"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME17"
.BEGREC "NONAME18",26
.DEFINE "point"
.VALUE 0
.CLASS 8
.TAG "NONAME5"
.TYPE 8
.ENDEF
.DEFINE "label"
.VALUE 6
.CLASS 8
.DIM 20
.TYPE 98
.ENDEF
.ENDREC "NONAME18"
;    1	//
;    2	// Created by Decimation on 4/27/2018.
;    3	//
;    4	
;    5	#include "GraphicsExt.h"
;    6	#include "Library.h"
;    7	#include "/LabelPoint/LabelPoint.h"
;    8	#include <string.h>
;    9	
;   10	void ui_ClearFraction(gfx_point_t point)
;   11	{
_ui_ClearFraction:
.DEFINE "_ui_ClearFraction"

.VALUE _ui_ClearFraction

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ui_ClearFraction",11,"_ui_ClearFraction"

.LINE 11

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

;   12		static const uint8_t w = 60;
.LINE 12

.DEFINE "w"

.ALIAS "_0w"

.CLASS 84

.VALUE _0w

.TYPE 12

.ENDEF

;   13		static const uint8_t h = 35;
.LINE 13

.DEFINE "h"

.ALIAS "_1h"

.CLASS 84

.VALUE _1h

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   14		point.x -= 1;
.LINE 14

	LD	DE,(IX+6)
	DEC	DE
	LD	(IX+6),DE
;   15		point.y -= 16;
.LINE 15

	LD	IY,(IX+9)
	LEA	IY,IY+-16
	LD	(IX+9),IY
;   16		ui_ClearArea(point, w, h);
.LINE 16

	LD	DE,35
	PUSH	DE
	LD	DE,60
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_ui_ClearArea
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   17	}
.LINE 17

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ui_ClearFraction ***************************
;Name                         Addr/Register   Size   Type
;_ui_ClearArea                       IMPORT  -----   function
;point                                 IX+6      6   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ui_ClearFraction",17,"_ui_ClearFraction"
	SEGMENT TEXT
_0w:
	DB	60
_1h:
	DB	35
	SEGMENT CODE
;   18	
;   19	void ui_ClearArea(gfx_point_t point, uint8_t w, uint8_t h)
;   20	{
_ui_ClearArea:
.DEFINE "_ui_ClearArea"

.VALUE _ui_ClearArea

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "ui_ClearArea",20,"_ui_ClearArea"

.LINE 20

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "w"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "h"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   21		gfx_SetColor(gfx_white);
.LINE 21

	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   22		gfx_FillRectangle(point.x, point.y, w, h);
.LINE 22

	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   23		gfx_SetColor(gfx_black);
.LINE 23

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   24	}
.LINE 24

	LD	SP,IX
	POP	IX
	RET	


;**************************** _ui_ClearArea ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;h                                    IX+15      1   parameter
;w                                    IX+12      1   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "ui_ClearArea",24,"_ui_ClearArea"
;   25	
;   26	void gfx_RadicalFraction(gfx_point_t point, int24_t numOuter, int24_t numInner, int24_t denomOuter, int24_t denomInner)
;   27	{
_gfx_RadicalFraction:
.DEFINE "_gfx_RadicalFraction"

.VALUE _gfx_RadicalFraction

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_RadicalFraction",27,"_gfx_RadicalFraction"

.LINE 27

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "numOuter"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "numInner"

.CLASS 65

.VALUE 15

.TYPE 4

.ENDEF

.DEFINE "denomOuter"

.CLASS 65

.VALUE 18

.TYPE 4

.ENDEF

.DEFINE "denomInner"

.CLASS 65

.VALUE 21

.TYPE 4

.ENDEF

.DEFINE "numLength"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "denomLength"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "numInnerBuf"

.CLASS 65

.VALUE -16

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "numOuterBuf"

.CLASS 65

.VALUE -26

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "denomInnerBuf"

.CLASS 65

.VALUE -36

.DIM 10

.TYPE 98

.ENDEF

.DEFINE "denomOuterBuf"

.CLASS 65

.VALUE -46

.DIM 10

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-53
	LD	SP,HL
;   28	
;   29		char numInnerBuf[10], numOuterBuf[10];
;   30		char denomInnerBuf[10], denomOuterBuf[10];
;   31	
;   32		int numLength, denomLength;
;   33		dbg_sprintf(dbgout, "gfx - rad frac\n");
.LINE 33

	LD	DE,L__2
	PUSH	DE
	LD	DE,16449536
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
;   34		sprintf(numOuterBuf, "%d", numOuter);
.LINE 34

	LD	DE,(IX+12)
	PUSH	DE
	LD	DE,L__3
	PUSH	DE
	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   35		sprintf(numInnerBuf, "%d", numInner);
.LINE 35

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,L__4
	PUSH	DE
	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   36	
;   37		sprintf(denomOuterBuf, "%d", denomOuter);
.LINE 37

	LD	DE,(IX+18)
	PUSH	DE
	LD	DE,L__5
	PUSH	DE
	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   38		sprintf(denomInnerBuf, "%d", denomInner);
.LINE 38

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,L__6
	PUSH	DE
	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   39	
;   40		numLength   = (strlen(numOuterBuf) + strlen(numInnerBuf));
.LINE 40

	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-16
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-3),HL
;   41		denomLength = (strlen(denomOuterBuf) + strlen(denomInnerBuf));
.LINE 41

	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-36
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-6),HL
;   42	
;   43		//todo: center the fractions in these two cases
;   44		if (numLength > denomLength) {
.LINE 44

	LD	DE,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_5
;   45			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
.LINE 45

	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-26
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   46	
;   47	
;   48		}
;   49		else if (numLength < denomLength) {
.LINE 49

	JR	L_6
L_5:
	LD	DE,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_3
;   50			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(denomInnerBuf) + gfx_GetStringWidth(denomOuterBuf) + 7);
.LINE 50

	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-46
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   51	
;   52	
;   53		}
;   54		else {
.LINE 54

	JR	L_6
L_3:
;   55			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
.LINE 55

	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	LD	DE,HL
	PEA	IX+-26
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   56	
;   57	
;   58		}
L_6:
.LINE 58

;   59	
;   60		point.y -= 9;
.LINE 60

	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   61		gfx_Sqrt(point, numOuter, numInner);
.LINE 61

	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   62	
;   63		point.y += 14;
.LINE 63

	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   64		gfx_Sqrt(point, denomOuter, denomInner);
.LINE 64

	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   65	}
.LINE 65

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_RadicalFraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Sqrt                           IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;denomOuterBuf                        IX-46     10   variable
;denomInnerBuf                        IX-36     10   variable
;numOuterBuf                          IX-26     10   variable
;numInnerBuf                          IX-16     10   variable
;denomLength                           IX-6      3   variable
;numLength                             IX-3      3   variable
;denomInner                           IX+21      3   parameter
;denomOuter                           IX+18      3   parameter
;numInner                             IX+15      3   parameter
;numOuter                             IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 77 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_RadicalFraction",65,"_gfx_RadicalFraction"
	SEGMENT STRSECT
L__2:
	DB	"gfx - rad frac"
	DB	10,0
L__3:
	DB	"%d"
	DB	0
L__4:
	DB	"%d"
	DB	0
L__5:
	DB	"%d"
	DB	0
L__6:
	DB	"%d"
	DB	0
	SEGMENT CODE
;   66	
;   67	void gfx_Fraction(gfx_point_t point, real_t num, real_t denom)
;   68	{
_gfx_Fraction:
.DEFINE "_gfx_Fraction"

.VALUE _gfx_Fraction

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Fraction",68,"_gfx_Fraction"

.LINE 68

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "num"

.CLASS 65

.VALUE 12

.TAG "NONAME8"

.TYPE 8

.ENDEF

.DEFINE "denom"

.CLASS 65

.VALUE 21

.TAG "NONAME8"

.TYPE 8

.ENDEF

.DEFINE "numbuf"

.CLASS 65

.VALUE -15

.DIM 15

.TYPE 98

.ENDEF

.DEFINE "denombuf"

.CLASS 65

.VALUE -30

.DIM 15

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-33
	LD	SP,HL
;   69		char numbuf[15];
;   70		char denombuf[15];
;   71		os_RealToStr(numbuf, &num, 7, 0, 6);
.LINE 71

	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	LD	DE,7
	PUSH	DE
	PEA	IX+12
	PEA	IX+-15
	LD	(IX+-33),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-33)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   72		os_RealToStr(denombuf, &denom, 7, 0, 6);
.LINE 72

	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	LD	DE,7
	PUSH	DE
	PEA	IX+21
	PEA	IX+-30
	LD	(IX+-33),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-33)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   73		gfx_FractionStr(point, numbuf, denombuf);
.LINE 73

	PEA	IX+-30
	PEA	IX+-15
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_FractionStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   74	}
.LINE 74

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Fraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FractionStr                    IMPORT  -----   function
;_os_RealToStr                       IMPORT  -----   function
;denombuf                             IX-30     15   variable
;numbuf                               IX-15     15   variable
;denom                                IX+21      9   parameter
;num                                  IX+12      9   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 63 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Fraction",74,"_gfx_Fraction"
;   75	
;   76	void gfx_FractionStr(gfx_point_t point, const char* num, const char* denom)
;   77	{
_gfx_FractionStr:
.DEFINE "_gfx_FractionStr"

.VALUE _gfx_FractionStr

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_FractionStr",77,"_gfx_FractionStr"

.LINE 77

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "num"

.CLASS 65

.VALUE 12

.TYPE 194

.ENDEF

.DEFINE "denom"

.CLASS 65

.VALUE 15

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   78		if (strlen(num) > strlen(denom)) {
.LINE 78

	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	LD	DE,(IX+15)
	PUSH	DE
	LD	(IX+-3),BC
	CALL	_strlen
	LD	BC,(IX+-3)
	POP	DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_12
;   79			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(num) + 1);
.LINE 79

	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   80	
;   81			gfx_PrintStringXY(denom, point.x + ((gfx_GetStringWidth(denom) + 1) / 2), point.y + 5);
.LINE 81

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   82			gfx_PrintStringXY(num, point.x, point.y - 5);
.LINE 82

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   83		}
;   84		else if (strlen(num) < strlen(denom)) {
.LINE 84

	JR	L_13
L_12:
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	DE,HL
	LD	BC,(IX+15)
	PUSH	BC
	LD	(IX+-3),DE
	LD	(IX+-4),D
	CALL	_strlen
	LD	DE,(IX+-3)
	LD	D,(IX+-4)
	POP	BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_10
;   85			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
.LINE 85

	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   86	
;   87			gfx_PrintStringXY(num, point.x + ((gfx_GetStringWidth(num) + 1) / 2), point.y - 5);
.LINE 87

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   88			gfx_PrintStringXY(denom, point.x, point.y + 5);
.LINE 88

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   89		}
;   90		else {
.LINE 90

	JR	L_13
L_10:
;   91			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
.LINE 91

	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   92	
;   93			gfx_PrintStringXY(num, point.x, point.y - 5);
.LINE 93

	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   94			gfx_PrintStringXY(denom, point.x, point.y + 5);
.LINE 94

	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   95		}
;   96	}
L_13:
.LINE 96

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_FractionStr ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;denom                                IX+15      3   parameter
;num                                  IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_FractionStr",96,"_gfx_FractionStr"
;   97	
;   98	void gfx_Sqrt(gfx_point_t point, int24_t outer, int24_t inner)
;   99	{
_gfx_Sqrt:
.DEFINE "_gfx_Sqrt"

.VALUE _gfx_Sqrt

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "gfx_Sqrt",99,"_gfx_Sqrt"

.LINE 99

.DEFINE "point"

.CLASS 65

.VALUE 6

.TAG "NONAME5"

.TYPE 8

.ENDEF

.DEFINE "outer"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "inner"

.CLASS 65

.VALUE 15

.TYPE 4

.ENDEF

.DEFINE "strW"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "buf"

.CLASS 65

.VALUE -23

.DIM 20

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-23
	LD	SP,HL
;  100		char buf[20];
;  101		int  strW;
;  102		dbg_sprintf(dbgout, "[GFX] Drawing sqrt\n");
.LINE 102

	LD	BC,L__14
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  103		sprintf(buf, "%d", outer);
.LINE 103

	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  104		strW = gfx_GetStringWidth(buf);
.LINE 104

	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-3),HL
;  105	
;  106		//190, 155
;  107		gfx_PrintStringXY(buf, point.x, point.y);
.LINE 107

	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  108	
;  109		//198, 158 -> 200, 160
;  110		gfx_Line(point.x + strW, point.y + 3, point.x + strW + 2, point.y + 7);
.LINE 110

	LD	IY,(IX+9)
	LEA	BC,IY+7
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	INC	HL
	INC	HL
	PUSH	HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  111	
;  112		//205, 155
;  113		gfx_VertLine(point.x + strW + 3, point.y - 3, 11);
.LINE 113

	LD	BC,11
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  114	
;  115		sprintf(buf, "%d", inner);
.LINE 115

	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  116		gfx_PrintStringXY(buf, point.x + strW + 6, point.y);
.LINE 116

	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  117	
;  118		gfx_HorizLine(point.x + strW + 3, point.y - 3, gfx_GetStringWidth(buf) + 3);
.LINE 118

	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  119	}
.LINE 119

	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Sqrt ***************************
;Name                         Addr/Register   Size   Type
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;buf                                  IX-23     20   variable
;strW                                  IX-3      3   variable
;inner                                IX+15      3   parameter
;outer                                IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 41 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "gfx_Sqrt",119,"_gfx_Sqrt"
	SEGMENT STRSECT
L__14:
	DB	"[GFX] Drawing sqrt"
	DB	10,0
L__15:
	DB	"%d"
	DB	0
L__16:
	DB	"%d"
	DB	0
	XREF _strlen:ROM
	XREF _sprintf:ROM
	XREF _os_RealToStr:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_SetColor:ROM
	XREF __setflag:ROM
	XREF __ishru_b:ROM
	XDEF _gfx_Sqrt
	XDEF _gfx_FractionStr
	XDEF _gfx_Fraction
	XDEF _gfx_RadicalFraction
	XDEF _ui_ClearArea
	XDEF _ui_ClearFraction
	END
