; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\GRAPHICSEXT.C"
	.assume ADL=1
	SEGMENT CODE
;    1	//
;    2	// Created by Decimation on 4/27/2018.
;    3	//
;    4	
;    5	#include "GraphicsExt.h"
;    6	#include "Library.h"
;    7	#include "LabelPoint.h"
;    8	#include <string.h>
;    9	#include <stdio.h>
;   10	#include <debug.h>
;   11	
;   12	void gfx_RadicalFraction(gfx_point_t point, int24_t numOuter, int24_t numInner, int24_t denomOuter, int24_t denomInner)
;   13	{
_gfx_RadicalFraction:
	LD	HL,-53
	CALL	__frameset
;   14		char numInnerBuf[10], numOuterBuf[10];
;   15		char denomInnerBuf[10], denomOuterBuf[10];
;   16	
;   17		int numLength, denomLength;
;   18	
;   19		sprintf(numOuterBuf, "%d", numOuter);
	LD	DE,(IX+12)
	PUSH	DE
	LD	DE,L__0
	PUSH	DE
	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   20		sprintf(numInnerBuf, "%d", numInner);
	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,L__1
	PUSH	DE
	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   21	
;   22		sprintf(denomOuterBuf, "%d", denomOuter);
	LD	DE,(IX+18)
	PUSH	DE
	LD	DE,L__2
	PUSH	DE
	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   23		sprintf(denomInnerBuf, "%d", denomInner);
	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,L__3
	PUSH	DE
	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_sprintf
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   24	
;   25		numLength   = (strlen(numOuterBuf) + strlen(numInnerBuf));
	PEA	IX+-26
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	PEA	IX+-16
	LD	DE,HL
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-3),HL
;   26		denomLength = (strlen(denomOuterBuf) + strlen(denomInnerBuf));
	PEA	IX+-46
	LD	(IX+-49),BC
	CALL	_strlen
	LD	BC,(IX+-49)
	POP	DE
	PEA	IX+-36
	LD	DE,HL
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_strlen
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	(IX+-6),HL
;   27	
;   28		//todo: center the fractions in these two cases
;   29		if (numLength > denomLength)
	LD	DE,(IX+-3)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_3
;   30		{
;   31			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	PEA	IX+-26
	LD	DE,HL
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   32	
;   33			point.y -= 9;
	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   34			gfx_Sqrt(point, numOuter, numInner);
	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   35	
;   36			point.y += 14;
	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   37			gfx_Sqrt(point, denomOuter, denomInner);
	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   38		}
;   39		else if (numLength < denomLength)
	JR	L_4
L_3:
	LD	DE,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_1
;   40		{
;   41			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(denomInnerBuf) + gfx_GetStringWidth(denomOuterBuf) + 7);
	PEA	IX+-36
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	PEA	IX+-46
	LD	DE,HL
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   42	
;   43			point.y -= 9;
	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   44			gfx_Sqrt(point, numOuter, numInner);
	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   45	
;   46			point.y += 14;
	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   47			gfx_Sqrt(point, denomOuter, denomInner);
	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   48		}
;   49		else
	JR	L_4
L_1:
;   50		{
;   51			gfx_HorizLine(point.x - 1, point.y, gfx_GetStringWidth(numInnerBuf) + gfx_GetStringWidth(numOuterBuf) + 7);
	PEA	IX+-16
	LD	(IX+-49),BC
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	POP	DE
	PEA	IX+-26
	LD	DE,HL
	LD	(IX+-49),BC
	LD	(IX+-52),DE
	LD	(IX+-53),D
	CALL	_gfx_GetStringWidth
	LD	BC,(IX+-49)
	LD	DE,(IX+-52)
	LD	D,(IX+-53)
	POP	IY
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+7
	PUSH	DE
	LD	DE,(IX+9)
	PUSH	DE
	LD	DE,(IX+6)
	DEC	DE
	PUSH	DE
	LD	(IX+-49),BC
	CALL	_gfx_HorizLine
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
;   52	
;   53			point.y -= 9;
	LD	IY,(IX+9)
	LEA	IY,IY+-9
	LD	(IX+9),IY
;   54			gfx_Sqrt(point, numOuter, numInner);
	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,(IX+12)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	LD	(IX+-49),BC
	CALL	_gfx_Sqrt
	LD	BC,(IX+-49)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   55	
;   56			point.y += 14;
	LD	IY,(IX+9)
	LEA	IY,IY+14
	LD	(IX+9),IY
;   57			gfx_Sqrt(point, denomOuter, denomInner);
	LD	DE,(IX+21)
	PUSH	DE
	LD	DE,(IX+18)
	PUSH	DE
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_Sqrt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   58	
;   59		}
;   60	}
L_4:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_RadicalFraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Sqrt                           IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;denomOuterBuf                        IX-46     10   variable
;denomInnerBuf                        IX-36     10   variable
;numOuterBuf                          IX-26     10   variable
;numInnerBuf                          IX-16     10   variable
;denomLength                           IX-6      3   variable
;numLength                             IX-3      3   variable
;denomInner                           IX+21      3   parameter
;denomOuter                           IX+18      3   parameter
;numInner                             IX+15      3   parameter
;numOuter                             IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 77 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"%d"
	DB	0
L__1:
	DB	"%d"
	DB	0
L__2:
	DB	"%d"
	DB	0
L__3:
	DB	"%d"
	DB	0
	SEGMENT CODE
;   61	
;   62	void gfx_Fraction(gfx_point_t point, real_t num, real_t denom)
;   63	{
_gfx_Fraction:
	LD	HL,-23
	CALL	__frameset
;   64		char numbuf[10];
;   65		char denombuf[10];
;   66		os_RealToStr(numbuf, &num, 0, 0, 6);
	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	PUSH	DE
	PEA	IX+12
	PEA	IX+-10
	LD	(IX+-23),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-23)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   67		os_RealToStr(denombuf, &denom, 0, 0, 6);
	LD	DE,6
	PUSH	DE
	LD	DE,0
	PUSH	DE
	PUSH	DE
	PEA	IX+21
	PEA	IX+-20
	LD	(IX+-23),BC
	CALL	_os_RealToStr
	LD	BC,(IX+-23)
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
;   68		gfx_FractionStr(point, numbuf, denombuf);
	PEA	IX+-20
	PEA	IX+-10
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+6
	LD	BC,6
	LDIR	
	CALL	_gfx_FractionStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   69	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Fraction ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FractionStr                    IMPORT  -----   function
;_os_RealToStr                       IMPORT  -----   function
;denombuf                             IX-20     10   variable
;numbuf                               IX-10     10   variable
;denom                                IX+21      9   parameter
;num                                  IX+12      9   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: 0 (instruction)


;   70	
;   71	void gfx_FractionStr(gfx_point_t point, const char* num, const char* denom)
;   72	{
_gfx_FractionStr:
	LD	HL,-4
	CALL	__frameset
;   73	
;   74	
;   75		if (strlen(num) > strlen(denom))
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,HL
	LD	(IX+-3),BC
	CALL	_strlen
	LD	BC,(IX+-3)
	POP	DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_9
;   76		{
;   77			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(num) + 1);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   78	
;   79			gfx_PrintStringXY(denom, point.x + ((gfx_GetStringWidth(denom) + 1) / 2), point.y + 5);
	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   80			gfx_PrintStringXY(num, point.x, point.y - 5);
	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   81		}
;   82		else if (strlen(num) < strlen(denom))
	JR	L_10
L_9:
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,(IX+15)
	PUSH	BC
	LD	DE,HL
	LD	(IX+-3),DE
	LD	(IX+-4),D
	CALL	_strlen
	LD	DE,(IX+-3)
	LD	D,(IX+-4)
	POP	BC
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	JR	NC,L_7
;   83		{
;   84			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   85	
;   86			gfx_PrintStringXY(num, point.x + ((gfx_GetStringWidth(num) + 1) / 2), point.y - 5);
	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   87			gfx_PrintStringXY(denom, point.x, point.y + 5);
	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   88		}
;   89		else
	JR	L_10
L_7:
;   90		{
;   91			gfx_HorizLine(point.x - 1, point.y + 3, gfx_GetStringWidth(denom) + 1);
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	INC	HL
	PUSH	HL
	LD	IY,(IX+9)
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+6)
	DEC	BC
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;   92	
;   93			gfx_PrintStringXY(num, point.x, point.y - 5);
	LD	IY,(IX+9)
	LEA	BC,IY+-5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   94			gfx_PrintStringXY(denom, point.x, point.y + 5);
	LD	IY,(IX+9)
	LEA	BC,IY+5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   95		}
;   96	}
L_10:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_FractionStr ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;denom                                IX+15      3   parameter
;num                                  IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;   97	
;   98	void gfx_Sqrt(gfx_point_t point, int24_t outer, int24_t inner)
;   99	{
_gfx_Sqrt:
	LD	HL,-23
	CALL	__frameset
;  100		char buf[20];
;  101		int  strW;
;  102		dbg_sprintf(dbgout, "[GFX] Drawing sqrt\n");
;  103		sprintf(buf, "%d", outer);
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  104		strW = gfx_GetStringWidth(buf);
	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	(IX+-3),HL
;  105	
;  106		//190, 155
;  107		gfx_PrintStringXY(buf, point.x, point.y);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  108	
;  109		//198, 158 -> 200, 160
;  110		gfx_Line(point.x + strW, point.y + 3, point.x + strW + 2, point.y + 7);
	LD	IY,(IX+9)
	LEA	BC,IY+7
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	INC	HL
	INC	HL
	PUSH	HL
	LEA	BC,IY+3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  111	
;  112		//205, 155
;  113		gfx_VertLine(point.x + strW + 3, point.y - 3, 11);
	LD	BC,11
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  114	
;  115		sprintf(buf, "%d", inner);
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  116		gfx_PrintStringXY(buf, point.x + strW + 6, point.y);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  117	
;  118		gfx_HorizLine(point.x + strW + 3, point.y - 3, gfx_GetStringWidth(buf) + 3);
	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+9)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  119	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gfx_Sqrt ***************************
;Name                         Addr/Register   Size   Type
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;buf                                  IX-23     20   variable
;strW                                  IX-3      3   variable
;inner                                IX+15      3   parameter
;outer                                IX+12      3   parameter
;point                                 IX+6      6   parameter


; Stack Frame Size: 41 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__11:
	DB	"%d"
	DB	0
L__12:
	DB	"%d"
	DB	0
	SEGMENT CODE
;  120	
;  121	
;  122	
;  123	
;  124	real_t io_gfx_ReadSqrt(labelpoint_t* point)
;  125	{
_io_gfx_ReadSqrt:
	LD	HL,-100
	CALL	__frameset
;  126		real_t      tmp, initialValue;
;  127		uint8_t     key;
;  128		int         i       = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  129		const int   strW    = gfx_GetStringWidth(point->label);
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
;  130		static char chars[] = "\0\0\0\0\0\0\0\0\0\0\"-RMH\0\0?[69LG\0\0.258KFC\0 147JEB\0\0XSNIDA\0\0\0\0\0\0\0\0";
;  131		chars[33] = '0';
	LD	(IX+-97),HL	; spill
	LD	HL,_0chars+33
	LD	(IX+-100),HL	; spill
	LD	HL,(IX+-97)	; unspill
	LD	(IX+-3),HL
	LD	HL,(IX+-100)	; unspill
	LD	(HL),48
;  132		chars[18] = '3';
	LD	HL,_0chars+18
	LD	(HL),51
;  133	
;  134		if (strlen(point->label) != 0)
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_strlen
	POP	BC
	CALL	__icmpzero
	JR	Z,L_15
;  135		{
;  136			initialValue = os_StrToReal(point->label, NULL);
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-40
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-31
	LD	BC,9
	LDIR	
;  137		}
;  138		else
	JR	L_16
L_15:
;  139		{
;  140			initialValue = os_Int24ToReal(1);
	LD	BC,1
	PUSH	BC
	PEA	IX+-49
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-31
	LD	BC,9
	LDIR	
;  141		}
L_16:
;  142	
;  143		lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  144		lp_Print(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Print
	POP	BC
;  145	
;  146		gfx_Line(point->point.x + strW, point->point.y + 3, point->point.x + strW + 2, point->point.y + 7);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-52),BC
	LD	IY,(IX+-52)
	LD	BC,(IY+0)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	IY,(IY+3)
	LD	BC,HL
	INC	BC
	LEA	DE,IY+7
	PUSH	DE
	INC	BC
	PUSH	BC
	LD	IY,(IX+-52)
	LD	IY,(IY+3)
	LEA	BC,IY+3
	PUSH	BC
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  147	
;  148		gfx_VertLine(point->point.x + strW + 3, point->point.y - 3, 11);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-55),BC
	LD	BC,11
	PUSH	BC
	LD	IY,(IX+-55)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-55)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  149	
;  150		gfx_HorizLine(point->point.x + strW + 3, point->point.y - 3, strW + 3);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-58),BC
	LD	IY,(IX+-3)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-58)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-58)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  151	
;  152		//gfx_Clear(point);
;  153		lib_MemZero(point->label, 20);
	LD	BC,20
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_lib_MemZero
	POP	BC
	POP	BC
;  154	
;  155		while ((key = os_GetCSC()) != sk_Enter)
	JR	L_23
L_24:
;  156		{
;  157			if (key == sk_Del)
	LD	A,(IX+-7)
	CP	A,56
	JR	NZ,L_21
;  158			{
;  159				lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  160				point->label[--i] = '\0';
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
	LD	IY,(IX+9)
	LEA	HL,IY+6
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(HL),0
;  161				lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  162				lp_Print(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Print
	POP	BC
;  163			}
;  164	
;  165			else if (chars[key] && i + 1 <= g_uDigitThreshold)
	JR	L_22
L_21:
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	LD	BC,_0chars
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	A,(HL)
	OR	A,A
	JR	Z,L_22
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-10),BC
	LD	A,(_g_uDigitThreshold)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-10)
	SBC	HL,BC
	JP	M,L_22
;  166			{
;  167				point->label[i++] = chars[key];
	LD	IY,(IX+9)
	LEA	HL,IY+6
	LD	IY,(IX+-13)
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-10)
	LD	(IX+-6),BC
;  168				gfx_PrintStringXY(point->label, point->point.x + strW + 6, point->point.y);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-61),BC
	LD	IY,(IX+-61)
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  169			}
L_22:
;  170			gfx_HorizLine(point->point.x + strW + 3, point->point.y - 3, gfx_GetStringWidth(point->label) + 3);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-64),BC
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+-64)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	BC,(IX+-3)
	LD	IY,(IX+-64)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+3
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  171		}
L_23:
	CALL	_os_GetCSC
	LD	(IX+-7),A
	CP	A,9
	JR	NZ,L_24
;  172	
;  173		gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  174		gfx_FillRectangle(point->point.x, point->point.y - 3, gfx_GetStringWidth(point->label) + strW + 6,
;  175						  point->point.y + 3);
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-67),BC
	LD	IY,(IY+3)
	LEA	BC,IY+3
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+6
	PUSH	BC
	LD	IY,(IX+-67)
	LD	IY,(IY+3)
	LEA	BC,IY+-3
	PUSH	BC
	LD	IY,(IX+-67)
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  176		gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  177	
;  178		tmp = os_StrToReal(point->label, NULL);
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-76
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-22
;  179		tmp = os_RealSqrt(&tmp);
	PEA	IX+-22
	PEA	IX+-85
	LD	BC,9
	LDIR	
	CALL	_os_RealSqrt
	POP	BC
	POP	BC
	LEA	DE,IX+-22
;  180		return os_RealMul(&initialValue, &tmp);
	PEA	IX+-22
	PEA	IX+-31
	PEA	IX+-94
	LD	BC,9
	LDIR	
	CALL	_os_RealMul
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+6	; spill
	LD	DE,(IY)
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)	; spill
;  181	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _io_gfx_ReadSqrt ***************************
;Name                         Addr/Register   Size   Type
;_os_RealMul                         IMPORT  -----   function
;_os_RealSqrt                        IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_g_uDigitThreshold                  IMPORT      1   variable
;_lib_MemZero                        IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_lp_Print                           IMPORT  -----   function
;_lp_Clear                           IMPORT  -----   function
;_os_Int24ToReal                     IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_0chars                             STATIC     57   variable
;_gfx_GetStringWidth                 IMPORT  -----   function
;initialValue                         IX-31      9   variable
;tmp                                  IX-22      9   variable
;G_3                                  IX-13      3   variable
;G_4                                  IX-10      3   variable
;key                                   IX-7      1   variable
;i                                     IX-6      3   variable
;strW                                  IX-3      3   variable
;point                                 IX+9      3   parameter


; Stack Frame Size: 112 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT DATA
_0chars:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	34
	DB	45
	DB	82
	DB	77
	DB	72
	DB	0
	DB	0
	DB	63
	DB	91
	DB	54
	DB	57
	DB	76
	DB	71
	DB	0
	DB	0
	DB	46
	DB	50
	DB	53
	DB	56
	DB	75
	DB	70
	DB	67
	DB	0
	DB	32
	DB	49
	DB	52
	DB	55
	DB	74
	DB	69
	DB	66
	DB	0
	DB	0
	DB	88
	DB	83
	DB	78
	DB	73
	DB	68
	DB	65
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;  182	
;  183	real_t io_gfx_ReadReal(labelpoint_t* point)
;  184	{
_io_gfx_ReadReal:
	LD	HL,-45
	CALL	__frameset
;  185		bool        isNeg   = false;
	LD	(IX+-6),0
;  186		uint8_t     key, i  = 0;
	LD	(IX+-1),0
;  187		real_t      rbuffer;
;  188		static char chars[] = "\0\0\0\0\0\0\0\0\0\0\"-RMH\0\0?[69LG\0\0.258KFC\0 147JEB\0\0XSNIDA\0\0\0\0\0\0\0\0";
;  189		lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  190		lib_MemZero(point->label, 20);
	LD	BC,20
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	CALL	_lib_MemZero
	POP	BC
	POP	BC
;  191		chars[33] = '0';
	LD	IY,_1chars
	LEA	HL,IY+33
	LD	(HL),48
;  192		chars[18] = '3';
	LEA	HL,IY+18
	LD	(HL),51
;  193	
;  194		while ((key = os_GetCSC()) != sk_Enter)
	JR	L_40
L_41:
;  195		{
;  196	
;  197			if (key == sk_Del)
	LD	A,(IX+-2)
	CP	A,56
	JR	NZ,L_32
;  198			{
;  199				lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  200				point->label[--i] = '\0';
	DEC	(IX+-1)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	(HL),0
;  201				lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  202				lp_Print(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Print
	POP	BC
;  203			}
L_32:
;  204	
;  205			if (key == 0x11) // todo: remove negative number support in GFX as our triangles can't have signed values
	LD	A,(IX+-2)
	CP	A,17
	JR	NZ,L_38
;  206			{
;  207				dbg_sprintf(dbgout, "Negative sign detected\n");
;  208				point->label[i++] = char_Neg;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	A,(_char_Neg)
	LD	(HL),A
	INC	(IX+-1)
;  209				lp_Clear(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Clear
	POP	BC
;  210				lp_Print(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Print
	POP	BC
;  211				isNeg = true;
	LD	(IX+-6),1
;  212			}
L_38:
;  213	
;  214			if (chars[key] == 'I')
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,_1chars
	ADD	HL,BC
	LD	(IX+-5),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,73
	SBC	HL,BC
	JR	NZ,L_37
;  215			{
;  216	
;  217				rbuffer = io_gfx_ReadSqrt(point);
	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-24
	CALL	_io_gfx_ReadSqrt
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
;  218				return rbuffer;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)	; spill
	JR	L_45
;  219			}
;  220	
;  221			else if (chars[key] && i + 1 <= g_uDigitThreshold)
L_37:
	LD	HL,(IX+-5)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_39
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(_g_uDigitThreshold)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	JP	M,L_39
;  222			{
;  223				point->label[i++] = chars[key];
	LD	IY,(IX+-5)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IY)
	LD	IY,(IX+9)
	LEA	HL,IY+6
	ADD	HL,BC
	LD	(HL),A
	INC	(IX+-1)
;  224			}
L_39:
;  225			lp_Print(point);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_lp_Print
	POP	BC
;  226			gfx_HorizLine(point->point.x, point->point.y + 8, gfx_GetStringWidth(point->label));
	LD	IY,(IX+9)
	LEA	BC,IY+0
	LD	(IX+-27),BC
	PEA	IY+6
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	IY,(IX+-27)
	LD	IY,(IY+3)
	LEA	BC,IY+8
	PUSH	BC
	LD	IY,(IX+-27)
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  227		}
L_40:
	CALL	_os_GetCSC
	LD	(IX+-2),A
	CP	A,9
	JR	NZ,L_41
;  228	
;  229		rbuffer = os_StrToReal(point->label, NULL);
	LD	BC,0
	PUSH	BC
	LD	IY,(IX+9)
	PEA	IY+6
	PEA	IX+-36
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
;  230		if (isNeg) rbuffer = os_RealNeg(&rbuffer);
	LD	A,(IX+-6)
	OR	A,A
	JR	Z,L_44
	PEA	IX+-15
	PEA	IX+-45
	CALL	_os_RealNeg
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,9
	LDIR	
L_44:
;  231	
;  232		/**/
;  233		//lib_StrReplace(point->label, char_Neg, '-');
;  234		//dbg_sprintf(dbgout, "[IO In] %s\n", point->label);
;  235	
;  236		return rbuffer;
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,9
	LDIR	
	LD	HL,(IX+6)	; spill
;  237	}
L_45:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _io_gfx_ReadReal ***************************
;Name                         Addr/Register   Size   Type
;_os_RealNeg                         IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_g_uDigitThreshold                  IMPORT      1   variable
;_io_gfx_ReadSqrt                    IMPORT  -----   function
;_char_Neg                           IMPORT      1   variable
;_lp_Print                           IMPORT  -----   function
;_1chars                             STATIC     57   variable
;_lib_MemZero                        IMPORT  -----   function
;_lp_Clear                           IMPORT  -----   function
;rbuffer                              IX-15      9   variable
;isNeg                                 IX-6      1   variable
;G_5                                   IX-5      3   variable
;key                                   IX-2      1   variable
;i                                     IX-1      1   variable
;point                                 IX+9      3   parameter


; Stack Frame Size: 57 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT DATA
_1chars:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	34
	DB	45
	DB	82
	DB	77
	DB	72
	DB	0
	DB	0
	DB	63
	DB	91
	DB	54
	DB	57
	DB	76
	DB	71
	DB	0
	DB	0
	DB	46
	DB	50
	DB	53
	DB	56
	DB	75
	DB	70
	DB	67
	DB	0
	DB	32
	DB	49
	DB	52
	DB	55
	DB	74
	DB	69
	DB	66
	DB	0
	DB	0
	DB	88
	DB	83
	DB	78
	DB	73
	DB	68
	DB	65
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	XREF _sprintf:ROM
	XREF _strlen:ROM
	XREF _char_Neg:ROM
	XREF _lib_MemZero:ROM
	XREF _lp_Clear:ROM
	XREF _lp_Print:ROM
	XREF _g_uDigitThreshold:ROM
	XREF _os_GetCSC:ROM
	XREF _os_StrToReal:ROM
	XREF _os_RealToStr:ROM
	XREF _os_Int24ToReal:ROM
	XREF _os_RealMul:ROM
	XREF _os_RealSqrt:ROM
	XREF _os_RealNeg:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_SetColor:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _io_gfx_ReadReal
	XDEF _io_gfx_ReadSqrt
	XDEF _gfx_Sqrt
	XDEF _gfx_FractionStr
	XDEF _gfx_Fraction
	XDEF _gfx_RadicalFraction
	END
