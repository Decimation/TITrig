; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\LIBRARY.C"
	.assume ADL=1
	SEGMENT TEXT
_char_Neg:
	DB	26
;    1	//
;    2	// Created by Decimation on 4/27/2018.
;    3	//
;    4	
;    5	#include <debug.h>
;    6	#include <string.h>
;    7	#include "Library.h"
;    8	
;    9	const char char_Neg = (char) 26;
	SEGMENT CODE
;   10	
;   11	int lib_StrCut(char* str, int begin, int len)
;   12	{
_lib_StrCut:
	LD	HL,-6
	CALL	__frameset
;   13		int l = strlen(str);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-3),HL
;   14	
;   15		if (len < 0) len         = l - begin;
	LD	HL,(IX+12)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_2
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_2:
;   16		if (begin + len > l) len = l - begin;
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_3
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_3:
;   17		memmove(str + begin, str + begin + len, l - len + 1);
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   18	
;   19		return len;
	LD	HL,(IX+12)
;   20	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _lib_StrCut ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;l                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;begin                                 IX+9      3   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;   21	
;   22	void os_RealToStrAuto(char* buf, real_t* p) {
_os_RealToStrAuto:
	CALL	__frameset0
;   23		os_RealToStr(buf,p,0,0,6);
	LD	BC,6
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_RealToStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   24	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_RealToStrAuto ***************************
;Name                         Addr/Register   Size   Type
;_os_RealToStr                       IMPORT  -----   function
;p                                     IX+9      3   parameter
;buf                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   25	void dbg_WeakAssert(bool cond) {
_dbg_WeakAssert:
	CALL	__frameset0
;   26		if (!cond) {
;   27			dbg_sprintf(dbgout, "[WARNING] Debug assertion failed\n");
;   28		}
;   29	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dbg_WeakAssert ***************************
;Name                         Addr/Register   Size   Type
;cond                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   30	
;   31	int lib_StrIndexOf(char* values, char find)
;   32	{
_lib_StrIndexOf:
	LD	HL,-6
	CALL	__frameset
;   33		int index;
;   34		const char* ptr = strchr(values, find);
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strchr
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;   35		if (ptr)
	CALL	__icmpzero
	JR	Z,L_10
;   36		{
;   37			index = (int) (ptr - values);
	LD	BC,(IX+6)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;   38		}
;   39		else index = -1;
	JR	L_11
L_10:
	LD	BC,16777215
	LD	(IX+-3),BC
L_11:
;   40		return index;
	LD	HL,(IX+-3)
;   41	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _lib_StrIndexOf ***************************
;Name                         Addr/Register   Size   Type
;_strchr                             IMPORT  -----   function
;ptr                                   IX-6      3   variable
;index                                 IX-3      3   variable
;find                                  IX+9      1   parameter
;values                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   42	
;   43	void lib_StrReplace(char* in, char c, char r)
;   44	{
_lib_StrReplace:
	LD	HL,-3
	CALL	__frameset
;   45		const int index = lib_StrIndexOf(in, c);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_lib_StrIndexOf
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;   46	
;   47		if (index != -1) in[index] = r;
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_14
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+12)
	LD	(HL),A
;   48	}
L_14:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _lib_StrReplace ***************************
;Name                         Addr/Register   Size   Type
;_lib_StrIndexOf                     IMPORT  -----   function
;index                                 IX-3      3   variable
;r                                    IX+12      1   parameter
;c                                     IX+9      1   parameter
;in                                    IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   49	
;   50	void lib_MemZero(char* ptr, int c)
;   51	{
_lib_MemZero:
	LD	HL,-3
	CALL	__frameset
;   52		int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;   53		dbg_sprintf(dbgout, "[lib_MemZero] Zeroing memory from 0x%p to 0x%p\n", (void*) ptr, &ptr + c);
	JR	L_19
;   54		for (; i < c; i++)
L_17:
;   55		{
;   56			ptr[i] = (char) NULL;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   57		}
L_19:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_17
	LD	SP,IX
	POP	IX
	RET	


;**************************** _lib_MemZero ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;c                                     IX+9      3   parameter
;ptr                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strlen:ROM
	XREF _strchr:ROM
	XREF _memmove:ROM
	XREF _os_RealToStr:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _lib_MemZero
	XDEF _lib_StrReplace
	XDEF _lib_StrIndexOf
	XDEF _dbg_WeakAssert
	XDEF _os_RealToStrAuto
	XDEF _lib_StrCut
	XDEF _char_Neg
	END
